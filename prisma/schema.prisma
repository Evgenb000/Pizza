generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(USER)

  provider   String?
  providerId String?

  orders           Order[]
  cart             Cart?
  verificationCode VerificationCode[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  imgUrl      String
  description String

  ingredients       Ingredient[]
  productVariations ProductVariation[]
  orders            Order[]
  category          Category           @relation(fields: [categoryId], references: [id])
  categoryId        Int
  cartItem          CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariation {
  id        Int  @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id        Int    @id @default(autoincrement())
  productId Int
  price     Int
  imageUrl  String

  products Product[]
  cartItem CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id       Int @id @default(autoincrement())
  quantity Int
  price    Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  product     Product      @relation(fields: [productId], references: [id])
  productId   Int
  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id         Int    @id @default(autoincrement())
  totalPrice Int    @default(0)
  token      String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  cartItem CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         Int         @id @default(autoincrement())
  totalPrice Int
  status     OrderStatus
  paymentId  String?
  items      Json

  fullName String
  address  String
  phone    String
  email    String
  comment  String

  user     User?     @relation(fields: [userId], references: [id])
  userId   Int?
  token    String
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id   Int    @id @default(autoincrement())
  code String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt DateTime @default(now())
}
